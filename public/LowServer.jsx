/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 LowServer.glb 
*/

import React, { useLayoutEffect, useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import ImageMesh from '../src/component/Banner/ImageMesh';
import ParticleSystem from '../src/component/Banner/ParticleSystem';
import gsap from 'gsap';
import { useThree } from '@react-three/fiber';
import { ScrollTrigger } from 'gsap/all';

export default function LowServer(props) {
  const { nodes, materials } = useGLTF('/LowServer.glb');
  const loading = !nodes; // Determine if nodes are loaded
  let mesh1 = useRef(null);
  let mesh2 = useRef(null);
  let mesh3 = useRef(null);
  let mesh4 = useRef(null);
  let mesh5 = useRef(null);
  let mesh6 = useRef(null);
  let img_mesh = useRef();

  let camera = useThree((state) => state.camera);
  let scene = useThree((state) => state.scene);
  gsap.registerPlugin(ScrollTrigger);

  useLayoutEffect(() => {
    // Only run animation if nodes are available
    if (!loading) {
      let m1_1 = mesh1.current;
      let m2_1 = mesh2.current;
      let m3_1 = mesh3.current;
      let m4_1 = mesh4.current;
      let m5_1 = mesh5.current;
      let m6_1 = mesh6.current;

      let t2 = gsap.timeline({
        scrollTrigger: {
          trigger: "#server-model",
          start: "top top",
          end: () => innerHeight * 6,
          scrub: 1,
          snap: "labels"
        },
      });

      t2.to(camera.position, { x: -11.2, y: 0.69, z: 1 }, "key")
        .to(scene.position, { x: -6, y: -2.5, z: -1.9 }, "key")
        .to(scene.rotation, { x: 0.02, y: 6.81, z: -0.2 }, "key")
        .to(scene.children[1], { intensity: 5 }, "key")
        .to(scene.children[1].position, { x: 0, y: 0, z: 0 }, "key")
        .to(scene.children[3], { intensity: 0 }, "key")
        .to(scene.children[4].position, { x: -20, y: 20, z: 0 }, "key")
        .to(scene.children[5].position, { x: -10, y: 6, z: 5 }, "key")
        .to(camera.position, { x: -9.2, y: 0.89, z: 0.5 }, "key1")
        .to(scene.position, { x: -4.8, y: -3.1, z: -7 }, "key1")
        .to(scene.rotation, { x: 0.28, y: 13.7, z: -0.3 }, "key1")
        .to(m1_1.position, { x: 0.02, y: 1.31, z: 0 }, "key1")
        .to(m2_1.position, { x: 0, y: 0.6, z: 0 }, "key1")
        .to(m3_1.position, { x: 0, y: -0.195, z: 0 }, "key1")
        .to(m4_1.position, { x: 0, y: -0.972, z: 0 }, "key1")
        .to(m5_1.position, { y: 1.3 }, "key1")
        .to(m6_1.position, { y: 1.3 }, "key1")
        .to(scene.children[0].position, { x: 4, y: 1, z: 12 }, "key1")
        .to(scene.children[7], { intensity: 10 }, "key1")
        .to(scene.children[4].position, { x: 5, y: 10, z: -5 }, "key1")
        .to(scene.children[5].position, { x: -15, y: 5, z: 3 }, "key1")
        .to(camera.position, { x: -9.85, y: 3.59, z: 4.9 }, "key5")
        .to(camera.scale, { x: 0.6, y: 0.5 }, "key5")
        .to(scene.position, { x: 18.799, y: -7.55, z: -2.15 }, "key5")
        .to(scene.rotation, { x: -0.1, y: -0.5, z: -0.01 }, "key5")
        .to(m1_1.position, { x: 0.02, y: 0.339, z: 0 }, "key5")
        .to(m2_1.position, { x: 0, y: -0.096, z: 0 }, "key5")
        .to(m3_1.position, { x: 0, y: -0.535, z: 0 }, "key5")
        .to(m4_1.position, { x: 0, y: -0.972, z: 0 }, "key5")
        .to(m5_1.position, { y: 0.354 }, "key5")
        .to(m6_1.position, { y: 0.354 }, "key5")
        .to(scene.children[0], { intensity: 0 }, "key5")
        .to(scene.children[1].position, { x: 5, y: 5, z: -5 }, "key5")
        .to(scene.children[1], { intensity: 80 }, "key5")
        .to(scene.children[2], { intensity: 5 }, "key5")
        .to(scene.children[4].position, { x: -5, y: 12, z: 4 }, "key5")
        .to(scene.children[4], { intensity: 4000 }, "key5")
        .to(scene.children[5].position, { x: -10, y: 5, z: 3 }, "key5")
        .to(scene.children[5], { intensity: 4000 }, "key5")
        .to(scene.children[6].position, { x: 0, y: 0, z: 4 }, "key5")
        .to(scene.children[6], { intensity: 50 }, "key5")
        .to(camera.position, { x: -7.55, y: 4.59, z: 10.1 }, "key6")
        .to(camera.scale, { x: 1.5, y: 1.5 }, "key6")
        .to(scene.position, { x: 9.999, y: -15.6, z: 0.5 }, "key6")
        .to(scene.rotation, { x: 0, y: 0.5, z: -0.6 }, "key6")
        .to(scene.children[0].position, { x: 4, y: 1, z: 1 }, "key6")
        .to(scene.children[0], { intensity: 10 }, "key6")
        .to(scene.children[1].position, { x: 0, y: 0, z: 0 }, "key6")
        .to(scene.children[1], { intensity: 5 }, "key6")
        .to(scene.children[2], { intensity: 5 }, "key6")
        .to(scene.children[3], { intensity: -5 }, "key6")
        .to(scene.children[4].position, { x: -20, y: 20, z: 0 }, "key6")
        .to(scene.children[4], { intensity: 100 }, "key6")
        .to(scene.children[5].position, { x: -10, y: 6, z: 5 }, "key6")
        .to(scene.children[5], { intensity: 2000 }, "key6")
        .to(scene.children[6], { intensity: 0 }, "key6")
        .to(scene.children[7], { intensity: 0 }, "key6")
        // .to(scene.children[0], { intensity: 5 }, "key6")
        // .to(scene.children[1], { intensity: 5 }, "key6")
        // .to(scene.children[2], { intensity: 5 }, "key6")
        // .to(scene.children[3], { intensity: 5 }, "key6")
        // .to(scene.children[4], { intensity: 5 }, "key6")
        // .to(scene.children[5], { intensity: 5 }, "key6")
        // .to(scene.children[6], { intensity: 5 }, "key6")
        // .to(scene.children[7], { intensity: 5 }, "key6");
    }
  }, [loading, camera, scene]); // Dependency array includes loading, camera, scene


  return (
    <group {...props} dispose={null}>
      <group position={[0, 0.405, 0]} scale={1.28}>
        <mesh ref={mesh1} geometry={nodes.Cube.geometry} material={materials.Material} position={[0, 0.339, 0]} scale={[1, 0.261, 1]}>
          <mesh geometry={nodes.Sphere.geometry} material={materials['Material.002']} position={[-0.913, -0.304, -0.553]} rotation={[0, Math.PI / 2, 0]} scale={[0.011, 0.042, 0.011]} />
          <mesh geometry={nodes.Sphere001.geometry} material={materials['Material.002']} position={[-0.913, -0.304, -0.52]} rotation={[0, Math.PI / 2, 0]} scale={[0.011, 0.042, 0.011]} />
          <mesh geometry={nodes.Sphere002.geometry} material={materials['Material.002']} position={[-0.913, -0.304, -0.486]} rotation={[0, Math.PI / 2, 0]} scale={[0.011, 0.042, 0.011]} />
          <mesh geometry={nodes.Torus.geometry} material={materials.Material} position={[0, -1.297, 0]} scale={[1, 3.825, 1]} />
        </mesh>
        {/* <mesh geometry={nodes.ESDS_Text_Logo.geometry} material={materials['Material.004']} position={[0.008, 0.545, 0]} rotation={[0, -1.571, 0]} scale={[0.842, 0.058, 0.842]} /> */}
        <mesh  ref={mesh5} geometry={nodes.Display001.geometry} material={materials['Material.004']} position={[-0.901, 0.354, 0.433]} scale={[0.015, 0.115, 0.254]} />
        <ImageMesh img_mesh={img_mesh} />
        <mesh  ref={mesh6} geometry={nodes.Graphic_Element.geometry} material={materials['Display Elements_1@6x']} position={[-0.914, 0.354, 0.43]} rotation={[Math.PI / 2, 0, Math.PI / 2]} scale={0.159} />
        <mesh ref={mesh2} geometry={nodes.Cube003.geometry} material={materials.Material} position={[0, -0.096, 0]} scale={[1, 0.261, 1]}>
          <ParticleSystem />
          <mesh geometry={nodes.Sphere004.geometry} material={materials['Material.002']} position={[-0.913, -0.304, -0.553]} rotation={[0, Math.PI / 2, 0]} scale={[0.011, 0.042, 0.011]} />
          <mesh geometry={nodes.Sphere005.geometry} material={materials['Material.002']} position={[-0.913, -0.304, -0.52]} rotation={[0, Math.PI / 2, 0]} scale={[0.011, 0.042, 0.011]} />
          <mesh geometry={nodes.Sphere006.geometry} material={materials['Material.002']} position={[-0.913, -0.304, -0.486]} rotation={[0, Math.PI / 2, 0]} scale={[0.011, 0.042, 0.011]} />
          <mesh geometry={nodes.Torus001.geometry} material={materials.Material} position={[0, -1.297, 0]} scale={[1, 3.825, 1]} />
        </mesh>
        <mesh ref={mesh3} geometry={nodes.Cube004.geometry} material={materials.Material} position={[0, -0.535, 0]} scale={[1, 0.261, 1]}>
        <ParticleSystem />
          <mesh geometry={nodes.Sphere007.geometry} material={materials['Material.002']} position={[-0.913, -0.304, -0.553]} rotation={[0, Math.PI / 2, 0]} scale={[0.011, 0.042, 0.011]} />
          <mesh geometry={nodes.Sphere008.geometry} material={materials['Material.002']} position={[-0.913, -0.304, -0.52]} rotation={[0, Math.PI / 2, 0]} scale={[0.011, 0.042, 0.011]} />
          <mesh geometry={nodes.Sphere009.geometry} material={materials['Material.002']} position={[-0.913, -0.304, -0.486]} rotation={[0, Math.PI / 2, 0]} scale={[0.011, 0.042, 0.011]} />
          <mesh geometry={nodes.Torus002.geometry} material={materials.Material} position={[0, -1.297, 0]} scale={[1, 3.825, 1]} />
        </mesh>
        <mesh ref={mesh4} geometry={nodes.Cube005.geometry} material={materials.Material} position={[0, -0.972, 0]} scale={[1, 0.261, 1]}>
        <ParticleSystem />
          <mesh geometry={nodes.Sphere010.geometry} material={materials['Material.002']} position={[-0.913, -0.304, -0.553]} rotation={[0, Math.PI / 2, 0]} scale={[0.011, 0.042, 0.011]} />
          <mesh geometry={nodes.Sphere011.geometry} material={materials['Material.002']} position={[-0.913, -0.304, -0.52]} rotation={[0, Math.PI / 2, 0]} scale={[0.011, 0.042, 0.011]} />
          <mesh geometry={nodes.Sphere012.geometry} material={materials['Material.002']} position={[-0.913, -0.304, -0.486]} rotation={[0, Math.PI / 2, 0]} scale={[0.011, 0.042, 0.011]} />
          <mesh geometry={nodes.Torus003.geometry} material={materials.Material} position={[0, -1.297, 0]} scale={[1, 3.825, 1]} />
        </mesh>
      </group>
    </group>
  )
}

useGLTF.preload('/LowServer.glb')
